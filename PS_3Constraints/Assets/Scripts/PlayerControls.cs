//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""04d67471-3739-41dc-92d3-ab399483bd9f"",
            ""actions"": [
                {
                    ""name"": ""RestartScene"",
                    ""type"": ""Button"",
                    ""id"": ""a2188401-bf63-4a74-8f38-a215796e742c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightEye"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d9ec8777-f434-4114-911c-751b84dde16e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftEye"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a629acf8-b817-44b5-9d37-97efc7d3eb84"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Catch"",
                    ""type"": ""Button"",
                    ""id"": ""d49a9bca-0516-4796-a8c7-bd122f3867bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""00b6cf0a-55e9-411b-b597-58497877a5c1"",
                    ""path"": ""<XInputController>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RestartScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c84fb7d2-461a-4a20-bcaf-0e7f030a372a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftEye"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""450b3eab-6400-4f5d-ac4c-362574d16952"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightEye"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95953767-97c4-4f36-8be9-d65a32fc7317"",
                    ""path"": ""<XInputController>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Catch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4129198-5c2c-4d65-9691-3279cde961e6"",
                    ""path"": ""<XInputController>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Catch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_RestartScene = m_Gameplay.FindAction("RestartScene", throwIfNotFound: true);
        m_Gameplay_RightEye = m_Gameplay.FindAction("RightEye", throwIfNotFound: true);
        m_Gameplay_LeftEye = m_Gameplay.FindAction("LeftEye", throwIfNotFound: true);
        m_Gameplay_Catch = m_Gameplay.FindAction("Catch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_RestartScene;
    private readonly InputAction m_Gameplay_RightEye;
    private readonly InputAction m_Gameplay_LeftEye;
    private readonly InputAction m_Gameplay_Catch;
    public struct GameplayActions
    {
        private @PlayerControls m_Wrapper;
        public GameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RestartScene => m_Wrapper.m_Gameplay_RestartScene;
        public InputAction @RightEye => m_Wrapper.m_Gameplay_RightEye;
        public InputAction @LeftEye => m_Wrapper.m_Gameplay_LeftEye;
        public InputAction @Catch => m_Wrapper.m_Gameplay_Catch;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @RestartScene.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRestartScene;
                @RestartScene.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRestartScene;
                @RestartScene.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRestartScene;
                @RightEye.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightEye;
                @RightEye.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightEye;
                @RightEye.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightEye;
                @LeftEye.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftEye;
                @LeftEye.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftEye;
                @LeftEye.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftEye;
                @Catch.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCatch;
                @Catch.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCatch;
                @Catch.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnCatch;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RestartScene.started += instance.OnRestartScene;
                @RestartScene.performed += instance.OnRestartScene;
                @RestartScene.canceled += instance.OnRestartScene;
                @RightEye.started += instance.OnRightEye;
                @RightEye.performed += instance.OnRightEye;
                @RightEye.canceled += instance.OnRightEye;
                @LeftEye.started += instance.OnLeftEye;
                @LeftEye.performed += instance.OnLeftEye;
                @LeftEye.canceled += instance.OnLeftEye;
                @Catch.started += instance.OnCatch;
                @Catch.performed += instance.OnCatch;
                @Catch.canceled += instance.OnCatch;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnRestartScene(InputAction.CallbackContext context);
        void OnRightEye(InputAction.CallbackContext context);
        void OnLeftEye(InputAction.CallbackContext context);
        void OnCatch(InputAction.CallbackContext context);
    }
}
